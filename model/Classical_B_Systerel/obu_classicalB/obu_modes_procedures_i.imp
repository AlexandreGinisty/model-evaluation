/* obu_modes_procedures_i
 * Author: Marielle Petit-Doche <marielle.doche@systerel.fr> --Systerel
 * Creation date: 07/05/13
 
  * Licensed under the EUPL V.1.1 or - as soon they will be approved by
 * the European Commission - subsequent versions of the EUPL (the
 * "Licence");
 * You may not use this work except in compliance with the Licence.

 * You may obtain a copy of the Licence at:
 *   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.

 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 */
IMPLEMENTATION
   obu_modes_procedures_i
REFINES
   obu_modes_procedures

SEES
    obu_types, 
    obu_inputs
   
IMPORTS
    Mode_management,
    OS_procedure
    
CONCRETE_VARIABLES
   M_mode, previous_mode
    ,
    M_level, previous_level
    ,
    procedure

INITIALISATION
    M_mode := NP ;
    previous_mode := NP;
    M_level := level_0;
    previous_level := level_0;
    procedure := NoProcedure  

OPERATIONS
   intialize_mode =
   BEGIN
       M_mode := SB ;
       previous_mode := SB ;
       M_level := level_0 ;
       previous_level := level_0 ;
       procedure := StartOfMission
       // start_of_mission § 5.4
   END
   ;

   modes_procedures_management(vv) =
   VAR previous_procedure IN
       // register of previous mode and level
       previous_mode := M_mode ;
       previous_level := M_level ;
       // register previous procedure
       previous_procedure := procedure ;
       // Management of the mode §4
       
        ASSERT
        	// ASSERTIONS on inputs (see obu_inputs) to ensure mutual  exclusion on the conditions of the same priority
    		// conditions 5, 6 and 50  are not TRUE in the same time
   	 		not ( (vv = 0 & driver_ask_SH = TRUE ) & (SH_request_accepted =  TRUE & driver_ack =  TRUE) ) &
	    	// conditions 5, 6, 10 are not TRUE in the same time
	    	not( (vv = 0 & driver_ask_SH = TRUE ) & ( Valid_Train_Data =  TRUE & Valid_MA =  TRUE & Valid_SSP =  TRUE & 
    						Valid_Grad =  TRUE & M_MAMODE =  ma_unknown)  ) &
	    	// conditions 50, 10 are not TRUE in the same time
	    	not( (SH_request_accepted =  TRUE & driver_ack =  TRUE) & ( Valid_Train_Data =  TRUE & Valid_MA =  TRUE 
	    	        	& Valid_SSP =  TRUE &   Valid_Grad =  TRUE & M_MAMODE =  ma_unknown)  )
		THEN
	    	skip
	    END   
       ;
       M_mode, M_level, procedure  <-- manage_mode(previous_mode, previous_level, vv, previous_procedure) ;
       
       // start_of_mission § 5.4
       // end_of_mission § 5.5
       // shunting_driver § 5.6
       // shunting_trackside § 5.7
       // override § 5.8
       // on_sight § 5.9
       M_mode <-- procedure_on_sight(M_mode, previous_mode, previous_level) 
       
       // level_transition § 5.10
       // train_trip § 5.11
       // change_train_orientation § 5.12
       // train_reversing § 5.13
       // joining § 5.14
       // splitting § 5.14
       // rbc_handover § 5.15
       // passing_non_protected_level_crossing § 5.16
       // changing_train_data § 5.17
       // indication_track_conditions § 5.18
       // limited_supervision § 5.19
   END
   ; 
   
    mm <--   get_mode = 
    BEGIN
        mm := M_mode
    END
   ; 
   
    ll <--   get_level = 
    BEGIN
        ll := M_level
    END
END
