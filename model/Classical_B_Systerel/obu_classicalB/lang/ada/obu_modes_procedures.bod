-- File obu_modes_procedures.bod
-- generated by Atelier-B/tbada on Wed May 29 22:10:39 2013
-- from input_file obu_modes_procedures.imp, checksum 637649043d63175dba922cf48255aa62
-- WARNING : this component has not been fully proved
-- THERE ARE THEREFORE NO GUARANTEES ABOUT THIS FILE

-- obu_modes_procedures_i
-- * Author: Marielle Petit-Doche <marielle.doche@systerel.fr> --Systerel
-- * Creation date: 07/05/13
-- 
--  * Licensed under the EUPL V.1.1 or - as soon they will be approved by
-- * the European Commission - subsequent versions of the EUPL (the
-- * "Licence");
-- * You may not use this work except in compliance with the Licence.
--
-- * You may obtain a copy of the Licence at:
-- *   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
--
-- * Unless required by applicable law or agreed to in writing, software
-- * distributed under the Licence is distributed on an "AS IS" basis,
-- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-- * implied.
--
-- * See the Licence for the specific language governing permissions and
-- * limitations under the Licence.
-- 
package body obu_modes_procedures is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_obu_modes_procedures) is
	begin
		-- IMPORTS Clause
		-- IMPORTS Mode_management
		this.ref_Mode_management := new Mode_management.TYPE_Mode_management ;
		Mode_management.IMPORTS(this.ref_Mode_management) ;
		-- IMPORTS OS_procedure
		this.ref_OS_procedure := new OS_procedure.TYPE_OS_procedure ;
		OS_procedure.IMPORTS(this.ref_OS_procedure) ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	-- SEES obu_types
	procedure SET_obu_types(
		this : in PTR_obu_modes_procedures ;
		new_obu_types : obu_types.PTR_obu_types) is
	begin
		this.ref_obu_types := new_obu_types ;
	end SET_obu_types ;
	-- SEES obu_inputs
	procedure SET_obu_inputs(
		this : in PTR_obu_modes_procedures ;
		new_obu_inputs : obu_inputs.PTR_obu_inputs) is
	begin
		this.ref_obu_inputs := new_obu_inputs ;
	end SET_obu_inputs ;
	procedure INITIALISATION(this : in PTR_obu_modes_procedures) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of imported machines
		Mode_management.INITIALISATION(this.ref_Mode_management) ;
		OS_procedure.INITIALISATION(this.ref_OS_procedure) ;
		-- Initialisation of seen machines
		obu_types.INITIALISATION(this.ref_obu_types) ;
		obu_inputs.INITIALISATION(this.ref_obu_inputs) ;
		-- INITIALISATION clause
		this.#obu_modes_procedures#M_mode := #obu_types#NP ;
		this.#obu_modes_procedures#previous_mode := #obu_types#NP ;
		this.#obu_modes_procedures#M_level := #obu_types#level_0 ;
		this.#obu_modes_procedures#previous_level := #obu_types#level_0 ;
		this.#obu_modes_procedures#procedure := #obu_types#NoProcedure ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #obu_modes_procedures#intialize_mode(this : in
		PTR_obu_modes_procedures) is
	begin
		this.#obu_modes_procedures#M_mode := #obu_types#SB ;
		this.#obu_modes_procedures#previous_mode := #obu_types#SB ;
		this.#obu_modes_procedures#M_level := #obu_types#level_0 ;
		this.#obu_modes_procedures#previous_level := #obu_types#level_0 ;
		this.#obu_modes_procedures#procedure := #obu_types#StartOfMission ;
	end #obu_modes_procedures#intialize_mode ;
	
	procedure #obu_modes_procedures#modes_procedures_management(
		this : in PTR_obu_modes_procedures ;
		#obu_modes_procedures#modes_procedures_management#0#vv: in INTEGER) is
		#obu_modes_procedures#modes_procedures_management#1#previous_procedure
			: obu_types_t_procedure ;
	begin
		this.#obu_modes_procedures#previous_mode :=
			this.#obu_modes_procedures#M_mode ;
		this.#obu_modes_procedures#previous_level :=
			this.#obu_modes_procedures#M_level ;
		#obu_modes_procedures#modes_procedures_management#1#previous_procedure
			:= this.#obu_modes_procedures#procedure ;
		-- Management of the mode ยง4
		null ;
		Mode_management.#mode_management#manage_mode(
			this.ref_Mode_management,
			this.#obu_modes_procedures#previous_mode,
			this.#obu_modes_procedures#previous_level,
			#obu_modes_procedures#modes_procedures_management#0#vv,
			#obu_modes_procedures#modes_procedures_management#1#previous_procedure,
			this.#obu_modes_procedures#M_mode,
			this.#obu_modes_procedures#M_level,
			this.#obu_modes_procedures#procedure) ;
		OS_procedure.#os_procedure#procedure_on_sight(
			this.ref_OS_procedure,
			this.#obu_modes_procedures#M_mode,
			this.#obu_modes_procedures#previous_mode,
			this.#obu_modes_procedures#previous_level,
			this.#obu_modes_procedures#M_mode) ;
	end #obu_modes_procedures#modes_procedures_management ;
	
	procedure #obu_modes_procedures#get_mode(
		this : in PTR_obu_modes_procedures ;
		#obu_modes_procedures#get_mode#0#mm: in out obu_types_t_mode) is
	begin
		#obu_modes_procedures#get_mode#0#mm :=
			this.#obu_modes_procedures#M_mode ;
	end #obu_modes_procedures#get_mode ;
	
	procedure #obu_modes_procedures#get_level(
		this : in PTR_obu_modes_procedures ;
		#obu_modes_procedures#get_level#0#ll: in out obu_types_t_level) is
	begin
		#obu_modes_procedures#get_level#0#ll :=
			this.#obu_modes_procedures#M_level ;
	end #obu_modes_procedures#get_level ;
	
	-- Access methods
end obu_modes_procedures ;
