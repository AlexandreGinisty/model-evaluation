-- File main_obu.bod
-- generated by Atelier-B/tbada on Wed May 29 22:10:39 2013
-- from input_file main_obu.imp, checksum 96d79d55a8c47f0a575f3b9871c0df4d

-- main_obu_i
-- * Author: Marielle Petit-Doche <marielle.doche@systerel.fr> --Systerel
-- * Creation date: 07/05/2013
--
-- * Licensed under the EUPL V.1.1 or - as soon they will be approved by
-- * the European Commission - subsequent versions of the EUPL (the
-- * "Licence");
-- * You may not use this work except in compliance with the Licence.
--
-- * You may obtain a copy of the Licence at:
-- *   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
--
-- * Unless required by applicable law or agreed to in writing, software
-- * distributed under the Licence is distributed on an "AS IS" basis,
-- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-- * implied.
--
-- * See the Licence for the specific language governing permissions and
-- * limitations under the Licence.
-- 
package body main_obu is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_main_obu) is
	begin
		-- IMPORTS Clause
		-- IMPORTS obu_inputs
		this.ref_obu_inputs := new obu_inputs.TYPE_obu_inputs ;
		obu_inputs.IMPORTS(this.ref_obu_inputs) ;
		-- IMPORTS obu_modes_procedures
		this.ref_obu_modes_procedures := new
			obu_modes_procedures.TYPE_obu_modes_procedures ;
		obu_modes_procedures.IMPORTS(this.ref_obu_modes_procedures) ;
		-- IMPORTS obu_principles
		this.ref_obu_principles := new obu_principles.TYPE_obu_principles ;
		obu_principles.IMPORTS(this.ref_obu_principles) ;
		-- IMPORTS obu_outputs
		this.ref_obu_outputs := new obu_outputs.TYPE_obu_outputs ;
		obu_outputs.IMPORTS(this.ref_obu_outputs) ;
		-- IMPORTS obu_types
		this.ref_obu_types := new obu_types.TYPE_obu_types ;
		obu_types.IMPORTS(this.ref_obu_types) ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	procedure INITIALISATION(this : in PTR_main_obu) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of imported machines
		obu_inputs.INITIALISATION(this.ref_obu_inputs) ;
		obu_modes_procedures.INITIALISATION(this.ref_obu_modes_procedures) ;
		obu_principles.INITIALISATION(this.ref_obu_principles) ;
		obu_outputs.INITIALISATION(this.ref_obu_outputs) ;
		obu_types.INITIALISATION(this.ref_obu_types) ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #main_obu#power_up(this : in PTR_main_obu) is
	begin
		obu_inputs.#obu_inputs#initial_read_inputs(this.ref_obu_inputs) ;
		obu_modes_procedures.#obu_modes_procedures#intialize_mode(
			this.ref_obu_modes_procedures) ;
		-- Subset 026 Chapter 4 and 5
		obu_principles.#obu_principles#initialize_data(
			this.ref_obu_principles) ;
		-- Subset 026 Chapter 3 
		obu_outputs.#obu_outputs#initial_send_outputs(this.ref_obu_outputs) ;
	end #main_obu#power_up ;
	
	procedure #main_obu#cycle(this : in PTR_main_obu) is
		#main_obu#cycle#1#vv : INTEGER ;
	begin
		obu_inputs.#obu_inputs#read_inputs(this.ref_obu_inputs) ;
		obu_principles.#obu_principles#get_V_train(
			this.ref_obu_principles,
			#main_obu#cycle#1#vv) ;
		obu_modes_procedures.#obu_modes_procedures#modes_procedures_management(
			this.ref_obu_modes_procedures,
			#main_obu#cycle#1#vv) ;
		-- Subset 026 Chapter 4 and 5
		obu_principles.#obu_principles#principles_management(
			this.ref_obu_principles) ;
		-- Subset 026 Chapter 3
		obu_outputs.#obu_outputs#send_outputs(this.ref_obu_outputs) ;
	end #main_obu#cycle ;
	
end main_obu ;
