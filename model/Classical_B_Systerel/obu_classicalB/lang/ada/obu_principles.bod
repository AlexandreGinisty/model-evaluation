-- File obu_principles.bod
-- generated by Atelier-B/tbada on Wed May 29 22:10:39 2013
-- from input_file obu_principles.imp, checksum 764db52ab4e6d560d366a6910030443f

-- obu_principles_i
-- * Author: Marielle Petit-Doche <marielle.doche@systerel.fr> --Systerel
-- * Creation date: 13/05/13
-- 
--  * Licensed under the EUPL V.1.1 or - as soon they will be approved by
-- * the European Commission - subsequent versions of the EUPL (the
-- * "Licence");
-- * You may not use this work except in compliance with the Licence.
--
-- * You may obtain a copy of the Licence at:
-- *   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
--
-- * Unless required by applicable law or agreed to in writing, software
-- * distributed under the Licence is distributed on an "AS IS" basis,
-- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-- * implied.
--
-- * See the Licence for the specific language governing permissions and
-- * limitations under the Licence.
-- 
package body obu_principles is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_obu_principles) is
	begin
		-- IMPORTS Clause
		-- IMPORTS obu_radio_comm
		this.ref_obu_radio_comm := new obu_radio_comm.TYPE_obu_radio_comm ;
		obu_radio_comm.IMPORTS(this.ref_obu_radio_comm) ;
		-- IMPORTS obu_speed_distance
		this.ref_obu_speed_distance := new
			obu_speed_distance.TYPE_obu_speed_distance ;
		obu_speed_distance.IMPORTS(this.ref_obu_speed_distance) ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	-- SEES obu_types
	procedure SET_obu_types(
		this : in PTR_obu_principles ;
		new_obu_types : obu_types.PTR_obu_types) is
	begin
		this.ref_obu_types := new_obu_types ;
	end SET_obu_types ;
	-- SEES obu_modes_procedures
	procedure SET_obu_modes_procedures(
		this : in PTR_obu_principles ;
		new_obu_modes_procedures : obu_modes_procedures.PTR_obu_modes_procedures) is
	begin
		this.ref_obu_modes_procedures := new_obu_modes_procedures ;
	end SET_obu_modes_procedures ;
	procedure INITIALISATION(this : in PTR_obu_principles) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of imported machines
		obu_radio_comm.INITIALISATION(this.ref_obu_radio_comm) ;
		obu_speed_distance.INITIALISATION(this.ref_obu_speed_distance) ;
		-- Initialisation of seen machines
		obu_types.INITIALISATION(this.ref_obu_types) ;
		obu_modes_procedures.INITIALISATION(this.ref_obu_modes_procedures) ;
		-- INITIALISATION clause
		this.#obu_principles#V_TRAIN := 0 ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #obu_principles#initialize_data(this : in PTR_obu_principles) is
	begin
		null ;
	end #obu_principles#initialize_data ;
	
	procedure #obu_principles#principles_management(this : in
		PTR_obu_principles) is
	begin
		-- balise §3.3 (Trackside)
		-- radio_communication §3.5 (OBU and Trackside)
		obu_radio_comm.#obu_radio_comm#manage_radio_communication(
			this.ref_obu_radio_comm) ;
		-- location §3.6 (OBU and Trackside)
		-- completness  §3.7(Trackside)
		-- movement_authority §3.8 (OBU and Trackside)
		-- Infill §3.9 (OBU and Trackside)
		-- Emergency Messages §3.10 (OBU and Trackside)
		-- Static speed restrictions and gradients §3.11 (OBU and Trackside)
		-- Other profiles §3.12 (OBU and Trackside)
		-- Speed and distance Monitoring §3.13 (OBU)
		obu_speed_distance.#obu_speed_distance#manage_speed_distance(
			this.ref_obu_speed_distance) ;
	end #obu_principles#principles_management ;
	
	procedure #obu_principles#get_V_train(
		this : in PTR_obu_principles ;
		#obu_principles#get_V_train#0#vv: in out INTEGER) is
	begin
		#obu_principles#get_V_train#0#vv := this.#obu_principles#V_TRAIN ;
	end #obu_principles#get_V_train ;
	
	-- Access methods
end obu_principles ;
