-- File Mode_management.bod
-- generated by Atelier-B/tbada on Wed May 29 22:10:39 2013
-- from input_file Mode_management.imp, checksum 67c4af8a09df19c814a06601c4e7f28d

-- Mode_management_i
-- * Author: Marielle Petit-Doche <marielle.doche@systerel.fr> --Systerel
-- * Creation date: 28/05/13
-- 
--  * Licensed under the EUPL V.1.1 or - as soon they will be approved by
-- * the European Commission - subsequent versions of the EUPL (the
-- * "Licence");
-- * You may not use this work except in compliance with the Licence.
--
-- * You may obtain a copy of the Licence at:
-- *   http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
--
-- * Unless required by applicable law or agreed to in writing, software
-- * distributed under the Licence is distributed on an "AS IS" basis,
-- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-- * implied.
--
-- * See the Licence for the specific language governing permissions and
-- * limitations under the Licence.
-- 
package body Mode_management is
	
	--------------------
	-- INITIALISATION --
	--------------------
	procedure IMPORTS(this : in PTR_Mode_management) is
	begin
		-- Component does not import any machine
		null ;
		-- Component does not extend any machine
		null ;
		-- Instance is not initialised
		this.initialisation := FALSE ;
	end IMPORTS ;
	-- SEES obu_types
	procedure SET_obu_types(
		this : in PTR_Mode_management ;
		new_obu_types : obu_types.PTR_obu_types) is
	begin
		this.ref_obu_types := new_obu_types ;
	end SET_obu_types ;
	-- SEES obu_inputs
	procedure SET_obu_inputs(
		this : in PTR_Mode_management ;
		new_obu_inputs : obu_inputs.PTR_obu_inputs) is
	begin
		this.ref_obu_inputs := new_obu_inputs ;
	end SET_obu_inputs ;
	procedure INITIALISATION(this : in PTR_Mode_management) is
	begin
		if (this.initialisation = TRUE)
		then
			return ;
		end if ;
		this.initialisation := TRUE ;
		-- Initialisation of seen machines
		obu_types.INITIALISATION(this.ref_obu_types) ;
		obu_inputs.INITIALISATION(this.ref_obu_inputs) ;
	end INITIALISATION ;
	----------------
	-- OPERATIONS --
	----------------
	procedure #mode_management#manage_mode(
		this : in PTR_Mode_management ;
		#mode_management#manage_mode#0#pm: in obu_types_t_mode ;
		#mode_management#manage_mode#0#pl: in obu_types_t_level ;
		#mode_management#manage_mode#0#vv: in INTEGER ;
		#mode_management#manage_mode#0#ppr: in obu_types_t_procedure ;
		#mode_management#manage_mode#0#mm: in out obu_types_t_mode ;
		#mode_management#manage_mode#0#ll: in out obu_types_t_level ;
		#mode_management#manage_mode#0#pr: in out obu_types_t_procedure) is
		#mode_management#manage_mode#1#di : BOOLEAN ;
		#mode_management#manage_mode#1#daSH : BOOLEAN ;
		#mode_management#manage_mode#1#SHra : BOOLEAN ;
		#mode_management#manage_mode#1#da : BOOLEAN ;
		#mode_management#manage_mode#1#vtd : BOOLEAN ;
		#mode_management#manage_mode#1#vma : BOOLEAN ;
		#mode_management#manage_mode#1#vssp : BOOLEAN ;
		#mode_management#manage_mode#1#vg : BOOLEAN ;
		#mode_management#manage_mode#1#mma : obu_types_t_mamode ;
	begin
		#mode_management#manage_mode#0#mm := #mode_management#manage_mode#0#pm ;
		#mode_management#manage_mode#0#ll := #mode_management#manage_mode#0#pl ;
		#mode_management#manage_mode#0#pr :=
			#mode_management#manage_mode#0#ppr ;
		obu_inputs.#obu_inputs#get_driver_isolate(
			this.ref_obu_inputs,
			#mode_management#manage_mode#1#di) ;
		if (#mode_management#manage_mode#1#di = TRUE)
		then
			#mode_management#manage_mode#0#mm := #obu_types#ISo ;
		-- enter in isolate mode
		else
			-- di = FALSE
			if (#mode_management#manage_mode#0#pm = #obu_types#SB)
			then
				obu_inputs.#obu_inputs#get_driver_ask_SH(
					this.ref_obu_inputs,
					#mode_management#manage_mode#1#daSH) ;
				if ((#mode_management#manage_mode#0#vv = 0) and then
					(#mode_management#manage_mode#1#daSH = TRUE))
				then
					#mode_management#manage_mode#0#mm := #obu_types#SH ;
				-- enter in SH
				else
					obu_inputs.#obu_inputs#get_driver_ack(
						this.ref_obu_inputs,
						#mode_management#manage_mode#1#da) ;
					obu_inputs.#obu_inputs#get_SH_request_accepted(
						this.ref_obu_inputs,
						#mode_management#manage_mode#1#SHra) ;
					if ((#mode_management#manage_mode#1#da = TRUE) and then
						(#mode_management#manage_mode#1#SHra = TRUE))
					then
						#mode_management#manage_mode#0#mm := #obu_types#SH ;
						#mode_management#manage_mode#0#pr :=
							#obu_types#SHInitiatedByDriver ;
					-- launch procedure SH Initiated by driver
					else
						obu_inputs.#obu_inputs#get_Valid_Train_Data(
							this.ref_obu_inputs,
							#mode_management#manage_mode#1#vtd) ;
						obu_inputs.#obu_inputs#get_Valid_MA(
							this.ref_obu_inputs,
							#mode_management#manage_mode#1#vma) ;
						obu_inputs.#obu_inputs#get_Valid_SSP(
							this.ref_obu_inputs,
							#mode_management#manage_mode#1#vssp) ;
						obu_inputs.#obu_inputs#get_Valid_Grad(
							this.ref_obu_inputs,
							#mode_management#manage_mode#1#vg) ;
						obu_inputs.#obu_inputs#get_M_MAMODE(
							this.ref_obu_inputs,
							#mode_management#manage_mode#1#mma) ;
						if (((((#mode_management#manage_mode#1#vtd = TRUE) and
							then (#mode_management#manage_mode#1#vma = TRUE)) and
							then (#mode_management#manage_mode#1#vssp = TRUE)) and
							then (#mode_management#manage_mode#1#vg = TRUE)) and
							then (#mode_management#manage_mode#1#mma =
							#obu_types#ma_unknown))
						then
							#mode_management#manage_mode#0#mm := #obu_types#FS ;
						-- enter in FS
						else
							-- condition 10  is false
							null ;
						end if ;
					end if ;
				end if ;
			end if ;
		end if ;
	end #mode_management#manage_mode ;
	
end Mode_management ;
