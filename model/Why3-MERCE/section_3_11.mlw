(*
copyright 2012 David MENTRE <d.mentre@fr.merce.mee.com>
                               -- Mitsubishi Electric R&D Centre Europe

Licensed under the EUPL V.1.1 or - as soon they will be approved by
the European Commission - subsequent versions of the EUPL (the
"Licence");
You may not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at:

  http://joinup.ec.europa.eu/software/page/eupl/licence-eupl

Unless required by applicable law or agreed to in writing, software
distributed under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied.

See the Licence for the specific language governing permissions and
limitations under the Licence.
*)

(* Reference: UNISIG SUBSET-026-3 v3.3.0 *)

(** Definition of Static Speed Restriction *)
module Section_3_11_2
  use import int.Int
  use export map.Map

  (* §3.11.2.1: not formalized *)

  (* §3.11.2.2 *)
  type static_speed_restriction_category =
       | Static_speed_profile
       | Temporary_speed_restriction
       (* WARNING: other speed restrictions are not formalized *)

  (* §3.11.2.3 *)
  type static_speed_restriction_categories 'a
    = map static_speed_restriction_category 'a

  (* §3.11.2.4 *)
  predicate passed_static_speed_restriction_continuity (train_length : int)
        (cat : static_speed_restriction_category)

  (* §3.11.2.5: deleted *)

  (* §3.11.2.6: deleted *)
end

(** Gradients *)
module Section_3_11_12
  use import ref.Ref
  use import section_3_6.Section_3_6_3_2

  (* §3.11.12.1: not formalized *)

  (* §3.11.12.2 *)
  type gradient_profile = continuous_profile_and_location_data int

  (* §3.11.12.3 *)
  predicate uphill_slope (p : gradient_profile) (n : int) = p[n].value >= 0

  predicate downhill_slope (p : gradient_profile) (n : int) = p[n].value <= 0

  (* §3.11.12.4: not formalized *)

  (* §3.11.12.5 *)
  val default_gradient_for_TSR_supervision : ref gradient_profile
  val read_gradient_via_balise_groups () : gradient_profile

  let update_default_gradient_via_balise () : () =
    default_gradient_for_TSR_supervision.contents <-
                                         read_gradient_via_balise_groups ()

  (* §3.11.12.6: not formalized *)
end
