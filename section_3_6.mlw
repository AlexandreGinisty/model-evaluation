(* copyright 2012 David MENTRE <d.mentre@fr.merce.mee.com>
      -- Mitsubishi Electric R&D Centre Europe *)

(* Reference: UNISIG SUBSET-026-3 v3.2.0 *)

(** Location, Continuous Profile Data and Non-continuous Profile Data *)
module Section_3_6_3_2
  use export int.Int
  use export array.Array

  (* ยง3.6.3.2.1 *)
  type entry 'a = { distance : int;
                         value : 'a }
  type continuous_profile_and_location_data 'a = array (entry 'a)

  (* WARNING: non continuous profile data not formalized *)

  (* Why3 voodoo incantations. ;-) Objective is to compute sum of
     distance elements. *)
  type container = continuous_profile_and_location_data int
  function f (c : container) (i : int) : int = c[i].distance
  clone sum.Sum with type container = container, function f = f

  function sum_before_n (profile : continuous_profile_and_location_data int)
                        (n : int) : int =
    Sum.sum profile 0 n

  (* ยง3.6.3.2.2 *)
  predicate valid_continuous_profile
      (profile : continuous_profile_and_location_data 'a) =
    length profile >= 1
    (* c) *)
    /\ (forall i:int. 0 <= i < length profile
          -> profile[i].distance >= 0)

  val get_value (profile : continuous_profile_and_location_data int)
                     (distance_from_LRBG : int) (previous_data : int) : int
      requires { valid_continuous_profile profile }
      ensures
        { (* a) *)
          (forall i:int. 0 <= i < length profile
            -> (result = profile[i].value <->
                sum_before_n profile i <= distance_from_LRBG
                                               < sum_before_n profile (i+1) ))
          (* b) *)
          /\ distance_from_LRBG < profile[0].distance
               <-> result = previous_data
          (* d *)
          /\ distance_from_LRBG >= sum_before_n profile (length profile) <->
               result = profile[length profile - 1].value }

 (* e) *)
 let proof_case_e p d prev (n : int)
     requires { valid_continuous_profile p
                /\ 1 <= n < length p /\ p[n+1].distance = 0
                /\ sum_before_n p n <= d < sum_before_n p (n+1) }
     ensures { result = p[n].value } =
   assert { sum_before_n p n = sum_before_n p (n+1) };
   get_value p d prev

  (* starting from ยง3.6.3.2.3, end of section ยง3.6.3.2 is not formalized *)
end
